{
  "contract_name": "arena-dao-core",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": ["extension", "open_proposal_submission"],
    "properties": {
      "deposit_info": {
        "description": "Information about the deposit requirements for this module. None if no deposit.",
        "anyOf": [
          {
            "$ref": "#/definitions/UncheckedDepositInfo"
          },
          {
            "type": "null"
          }
        ]
      },
      "extension": {
        "description": "Extension for instantiation. The default implementation will do nothing with this data.",
        "allOf": [
          {
            "$ref": "#/definitions/InstantiateExt"
          }
        ]
      },
      "open_proposal_submission": {
        "description": "If false, only members (addresses with voting power) may create proposals in the DAO. Otherwise, any address may create a proposal so long as they pay the deposit.",
        "type": "boolean"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Admin": {
        "description": "Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules.",
        "oneOf": [
          {
            "description": "Set the admin to a specified address.",
            "type": "object",
            "required": ["address"],
            "properties": {
              "address": {
                "type": "object",
                "required": ["addr"],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets the admin as the core module address.",
            "type": "object",
            "required": ["core_module"],
            "properties": {
              "core_module": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DepositRefundPolicy": {
        "oneOf": [
          {
            "description": "Deposits should always be refunded.",
            "type": "string",
            "enum": ["always"]
          },
          {
            "description": "Deposits should only be refunded for passed proposals.",
            "type": "string",
            "enum": ["only_passed"]
          },
          {
            "description": "Deposits should never be refunded.",
            "type": "string",
            "enum": ["never"]
          }
        ]
      },
      "DepositToken": {
        "description": "Information about the token to use for proposal deposits.",
        "oneOf": [
          {
            "description": "Use a specific token address as the deposit token.",
            "type": "object",
            "required": ["token"],
            "properties": {
              "token": {
                "type": "object",
                "required": ["denom"],
                "properties": {
                  "denom": {
                    "$ref": "#/definitions/UncheckedDenom"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Use the token address of the associated DAO's voting module. NOTE: in order to use the token address of the voting module the voting module must (1) use a cw20 token and (2) implement the `TokenContract {}` query type defined by `dao_macros::token_query`. Failing to implement that and using this option will cause instantiation to fail.",
            "type": "object",
            "required": ["voting_module_token"],
            "properties": {
              "voting_module_token": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InstantiateExt": {
        "type": "object",
        "required": ["competition_modules_instantiate_info", "rulesets", "tax"],
        "properties": {
          "competition_modules_instantiate_info": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ModuleInstantiateInfo"
            }
          },
          "rulesets": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Ruleset"
            }
          },
          "tax": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "ModuleInstantiateInfo": {
        "description": "Information needed to instantiate a module.",
        "type": "object",
        "required": ["code_id", "label", "msg"],
        "properties": {
          "admin": {
            "description": "CosmWasm level admin of the instantiated contract. See: <https://docs.cosmwasm.com/docs/1.0/smart-contracts/migration>",
            "anyOf": [
              {
                "$ref": "#/definitions/Admin"
              },
              {
                "type": "null"
              }
            ]
          },
          "code_id": {
            "description": "Code ID of the contract to be instantiated.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "label": {
            "description": "Label for the instantiated contract.",
            "type": "string"
          },
          "msg": {
            "description": "Instantiate message to be used to create the contract.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Ruleset": {
        "type": "object",
        "required": ["description", "id", "rules"],
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "$ref": "#/definitions/Uint128"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "UncheckedDenom": {
        "description": "A denom that has not been checked to confirm it points to a valid asset.",
        "oneOf": [
          {
            "description": "A native (bank module) asset.",
            "type": "object",
            "required": ["native"],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A cw20 asset.",
            "type": "object",
            "required": ["cw20"],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedDepositInfo": {
        "description": "Information about the deposit required to create a proposal.",
        "type": "object",
        "required": ["amount", "denom", "refund_policy"],
        "properties": {
          "amount": {
            "description": "The number of tokens that must be deposited to create a proposal. Must be a positive, non-zero number.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "denom": {
            "description": "The address of the token to be used for proposal deposits.",
            "allOf": [
              {
                "$ref": "#/definitions/DepositToken"
              }
            ]
          },
          "refund_policy": {
            "description": "The policy used for refunding deposits on proposal completion.",
            "allOf": [
              {
                "$ref": "#/definitions/DepositRefundPolicy"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Creates a new proposal in the pre-propose module. MSG will be serialized and used as the proposal creation message.",
        "type": "object",
        "required": ["propose"],
        "properties": {
          "propose": {
            "type": "object",
            "required": ["msg"],
            "properties": {
              "msg": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the configuration of this module. This will completely override the existing configuration. This new configuration will only apply to proposals created after the config is updated. Only the DAO may execute this message.",
        "type": "object",
        "required": ["update_config"],
        "properties": {
          "update_config": {
            "type": "object",
            "required": ["open_proposal_submission"],
            "properties": {
              "deposit_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/UncheckedDepositInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "open_proposal_submission": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraws funds inside of this contract to the message sender. The contracts entire balance for the specifed DENOM is withdrawn to the message sender. Only the DAO may call this method.\n\nThis is intended only as an escape hatch in the event of a critical bug in this contract or it's proposal module. Withdrawing funds will cause future attempts to return proposal deposits to fail their transactions as the contract will have insufficent balance to return them. In the case of `cw-proposal-single` this transaction failure will cause the module to remove the pre-propose module from its proposal hook receivers.\n\nMore likely than not, this should NEVER BE CALLED unless a bug in this contract or the proposal module it is associated with has caused it to stop receiving proposal hook messages, or if a critical security vulnerability has been found that allows an attacker to drain proposal deposits.",
        "type": "object",
        "required": ["withdraw"],
        "properties": {
          "withdraw": {
            "type": "object",
            "properties": {
              "denom": {
                "description": "The denom to withdraw funds for. If no denom is specified, the denomination currently configured for proposal deposits will be used.\n\nYou may want to specify a denomination here if you are withdrawing funds that were previously accepted for proposal deposits but are not longer used due to an `UpdateConfig` message being executed on the contract.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/UncheckedDenom"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Extension message. Contracts that extend this one should put their custom execute logic here. The default implementation will do nothing if this variant is executed.",
        "type": "object",
        "required": ["extension"],
        "properties": {
          "extension": {
            "type": "object",
            "required": ["msg"],
            "properties": {
              "msg": {
                "$ref": "#/definitions/ExecuteExt"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds a proposal submitted hook. Fires when a new proposal is submitted to the pre-propose contract. Only the DAO may call this method.",
        "type": "object",
        "required": ["add_proposal_submitted_hook"],
        "properties": {
          "add_proposal_submitted_hook": {
            "type": "object",
            "required": ["address"],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Removes a proposal submitted hook. Only the DAO may call this method.",
        "type": "object",
        "required": ["remove_proposal_submitted_hook"],
        "properties": {
          "remove_proposal_submitted_hook": {
            "type": "object",
            "required": ["address"],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Handles proposal hook fired by the associated proposal module when a proposal is completed (ie executed or rejected). By default, the base contract will return deposits proposals, when they are closed, when proposals are executed, or, if it is refunding failed.",
        "type": "object",
        "required": ["proposal_completed_hook"],
        "properties": {
          "proposal_completed_hook": {
            "type": "object",
            "required": ["new_status", "proposal_id"],
            "properties": {
              "new_status": {
                "$ref": "#/definitions/Status"
              },
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Admin": {
        "description": "Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules.",
        "oneOf": [
          {
            "description": "Set the admin to a specified address.",
            "type": "object",
            "required": ["address"],
            "properties": {
              "address": {
                "type": "object",
                "required": ["addr"],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets the admin as the core module address.",
            "type": "object",
            "required": ["core_module"],
            "properties": {
              "core_module": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DepositRefundPolicy": {
        "oneOf": [
          {
            "description": "Deposits should always be refunded.",
            "type": "string",
            "enum": ["always"]
          },
          {
            "description": "Deposits should only be refunded for passed proposals.",
            "type": "string",
            "enum": ["only_passed"]
          },
          {
            "description": "Deposits should never be refunded.",
            "type": "string",
            "enum": ["never"]
          }
        ]
      },
      "DepositToken": {
        "description": "Information about the token to use for proposal deposits.",
        "oneOf": [
          {
            "description": "Use a specific token address as the deposit token.",
            "type": "object",
            "required": ["token"],
            "properties": {
              "token": {
                "type": "object",
                "required": ["denom"],
                "properties": {
                  "denom": {
                    "$ref": "#/definitions/UncheckedDenom"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Use the token address of the associated DAO's voting module. NOTE: in order to use the token address of the voting module the voting module must (1) use a cw20 token and (2) implement the `TokenContract {}` query type defined by `dao_macros::token_query`. Failing to implement that and using this option will cause instantiation to fail.",
            "type": "object",
            "required": ["voting_module_token"],
            "properties": {
              "voting_module_token": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "ExecuteExt": {
        "oneOf": [
          {
            "type": "object",
            "required": ["update_competition_modules"],
            "properties": {
              "update_competition_modules": {
                "type": "object",
                "required": ["to_add", "to_remove"],
                "properties": {
                  "to_add": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstantiateInfo"
                    }
                  },
                  "to_remove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["jail_wager"],
            "properties": {
              "jail_wager": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["create_wager"],
            "properties": {
              "create_wager": {
                "type": "object",
                "required": [
                  "escrow_code_id",
                  "expiration",
                  "rules",
                  "stake",
                  "wager_amount",
                  "wager_dao"
                ],
                "properties": {
                  "escrow_code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "expiration": {
                    "$ref": "#/definitions/Expiration"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ruleset": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "stake": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MemberBalance"
                    }
                  },
                  "wager_amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MemberBalance"
                    }
                  },
                  "wager_dao": {
                    "$ref": "#/definitions/WagerDAO"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["handle_wager"],
            "properties": {
              "handle_wager": {
                "type": "object",
                "required": ["id"],
                "properties": {
                  "distribution": {
                    "type": ["array", "null"],
                    "items": {
                      "$ref": "#/definitions/MemberShare"
                    }
                  },
                  "id": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_rulesets"],
            "properties": {
              "update_rulesets": {
                "type": "object",
                "required": ["to_add", "to_disable"],
                "properties": {
                  "to_add": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Ruleset"
                    }
                  },
                  "to_disable": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Uint128"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["update_tax"],
            "properties": {
              "update_tax": {
                "type": "object",
                "required": ["tax"],
                "properties": {
                  "tax": {
                    "$ref": "#/definitions/Decimal"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": ["at_height"],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": ["at_time"],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": ["never"],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GenericTokenBalance": {
        "type": "object",
        "required": ["amount", "token_type"],
        "properties": {
          "addr": {
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": ["string", "null"]
          },
          "token_type": {
            "$ref": "#/definitions/GenericTokenType"
          }
        },
        "additionalProperties": false
      },
      "GenericTokenType": {
        "type": "string",
        "enum": ["native", "cw20", "cw721"]
      },
      "MemberBalance": {
        "type": "object",
        "required": ["balances", "member"],
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/GenericTokenBalance"
            }
          },
          "member": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "MemberShare": {
        "type": "object",
        "required": ["addr", "shares"],
        "properties": {
          "addr": {
            "type": "string"
          },
          "shares": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "additionalProperties": false
      },
      "ModuleInstantiateInfo": {
        "description": "Information needed to instantiate a module.",
        "type": "object",
        "required": ["code_id", "label", "msg"],
        "properties": {
          "admin": {
            "description": "CosmWasm level admin of the instantiated contract. See: <https://docs.cosmwasm.com/docs/1.0/smart-contracts/migration>",
            "anyOf": [
              {
                "$ref": "#/definitions/Admin"
              },
              {
                "type": "null"
              }
            ]
          },
          "code_id": {
            "description": "Code ID of the contract to be instantiated.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "label": {
            "description": "Label for the instantiated contract.",
            "type": "string"
          },
          "msg": {
            "description": "Instantiate message to be used to create the contract.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Ruleset": {
        "type": "object",
        "required": ["description", "id", "rules"],
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "$ref": "#/definitions/Uint128"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "Status": {
        "oneOf": [
          {
            "description": "The proposal is open for voting.",
            "type": "string",
            "enum": ["open"]
          },
          {
            "description": "The proposal has been rejected.",
            "type": "string",
            "enum": ["rejected"]
          },
          {
            "description": "The proposal has been passed but has not been executed.",
            "type": "string",
            "enum": ["passed"]
          },
          {
            "description": "The proposal has been passed and executed.",
            "type": "string",
            "enum": ["executed"]
          },
          {
            "description": "The proposal has failed or expired and has been closed. A proposal deposit refund has been issued if applicable.",
            "type": "string",
            "enum": ["closed"]
          },
          {
            "description": "The proposal's execution failed.",
            "type": "string",
            "enum": ["execution_failed"]
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UncheckedDenom": {
        "description": "A denom that has not been checked to confirm it points to a valid asset.",
        "oneOf": [
          {
            "description": "A native (bank module) asset.",
            "type": "object",
            "required": ["native"],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A cw20 asset.",
            "type": "object",
            "required": ["cw20"],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UncheckedDepositInfo": {
        "description": "Information about the deposit required to create a proposal.",
        "type": "object",
        "required": ["amount", "denom", "refund_policy"],
        "properties": {
          "amount": {
            "description": "The number of tokens that must be deposited to create a proposal. Must be a positive, non-zero number.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "denom": {
            "description": "The address of the token to be used for proposal deposits.",
            "allOf": [
              {
                "$ref": "#/definitions/DepositToken"
              }
            ]
          },
          "refund_policy": {
            "description": "The policy used for refunding deposits on proposal completion.",
            "allOf": [
              {
                "$ref": "#/definitions/DepositRefundPolicy"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WagerDAO": {
        "oneOf": [
          {
            "type": "object",
            "required": ["new"],
            "properties": {
              "new": {
                "type": "object",
                "required": [
                  "dao_code_id",
                  "group_code_id",
                  "members",
                  "proposal_code_id"
                ],
                "properties": {
                  "dao_code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "group_code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "proposal_code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["existing"],
            "properties": {
              "existing": {
                "type": "object",
                "required": ["addr"],
                "properties": {
                  "addr": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Gets the proposal module that this pre propose module is associated with. Returns `Addr`.",
        "type": "object",
        "required": ["proposal_module"],
        "properties": {
          "proposal_module": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the DAO (cw-dao-core) module this contract is associated with. Returns `Addr`.",
        "type": "object",
        "required": ["dao"],
        "properties": {
          "dao": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the module's configuration.",
        "type": "object",
        "required": ["config"],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the deposit info for the proposal identified by PROPOSAL_ID.",
        "type": "object",
        "required": ["deposit_info"],
        "properties": {
          "deposit_info": {
            "type": "object",
            "required": ["proposal_id"],
            "properties": {
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns list of proposal submitted hooks.",
        "type": "object",
        "required": ["proposal_submitted_hooks"],
        "properties": {
          "proposal_submitted_hooks": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Extension for queries. The default implementation will do nothing if queried for will return `Binary::default()`.",
        "type": "object",
        "required": ["query_extension"],
        "properties": {
          "query_extension": {
            "type": "object",
            "required": ["msg"],
            "properties": {
              "msg": {
                "$ref": "#/definitions/QueryExt"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "QueryExt": {
        "oneOf": [
          {
            "type": "object",
            "required": ["competition_modules"],
            "properties": {
              "competition_modules": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": ["integer", "null"],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "type": ["string", "null"]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["rulesets"],
            "properties": {
              "rulesets": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": ["string", "null"]
                  },
                  "limit": {
                    "type": ["integer", "null"],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "skip": {
                    "type": ["integer", "null"],
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["tax"],
            "properties": {
              "tax": {
                "type": "object",
                "properties": {
                  "height": {
                    "type": ["integer", "null"],
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": ["dump_state"],
            "properties": {
              "dump_state": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": ["open_proposal_submission"],
      "properties": {
        "deposit_info": {
          "description": "Information about the deposit required to create a proposal. If `None`, no deposit is required.",
          "anyOf": [
            {
              "$ref": "#/definitions/CheckedDepositInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "open_proposal_submission": {
          "description": "If false, only members (addresses with voting power) may create proposals in the DAO. Otherwise, any address may create a proposal so long as they pay the deposit.",
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CheckedDenom": {
          "description": "A denom that has been checked to point to a valid asset. This enum should never be constructed literally and should always be built by calling `into_checked` on an `UncheckedDenom` instance.",
          "oneOf": [
            {
              "description": "A native (bank module) asset.",
              "type": "object",
              "required": ["native"],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A cw20 asset.",
              "type": "object",
              "required": ["cw20"],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "CheckedDepositInfo": {
          "description": "Counterpart to the `DepositInfo` struct which has been processed. This type should never be constructed literally and should always by built by calling `into_checked` on a `DepositInfo` instance.",
          "type": "object",
          "required": ["amount", "denom", "refund_policy"],
          "properties": {
            "amount": {
              "description": "The number of tokens that must be deposited to create a proposal. This is validated to be non-zero if this struct is constructed by converted via the `into_checked` method on `DepositInfo`.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "The address of the cw20 token to be used for proposal deposits.",
              "allOf": [
                {
                  "$ref": "#/definitions/CheckedDenom"
                }
              ]
            },
            "refund_policy": {
              "description": "The policy used for refunding proposal deposits.",
              "allOf": [
                {
                  "$ref": "#/definitions/DepositRefundPolicy"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "DepositRefundPolicy": {
          "oneOf": [
            {
              "description": "Deposits should always be refunded.",
              "type": "string",
              "enum": ["always"]
            },
            {
              "description": "Deposits should only be refunded for passed proposals.",
              "type": "string",
              "enum": ["only_passed"]
            },
            {
              "description": "Deposits should never be refunded.",
              "type": "string",
              "enum": ["never"]
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "dao": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "deposit_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DepositInfoResponse",
      "type": "object",
      "required": ["proposer"],
      "properties": {
        "deposit_info": {
          "description": "The deposit that has been paid for the specified proposal.",
          "anyOf": [
            {
              "$ref": "#/definitions/CheckedDepositInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "proposer": {
          "description": "The address that created the proposal.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "CheckedDenom": {
          "description": "A denom that has been checked to point to a valid asset. This enum should never be constructed literally and should always be built by calling `into_checked` on an `UncheckedDenom` instance.",
          "oneOf": [
            {
              "description": "A native (bank module) asset.",
              "type": "object",
              "required": ["native"],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A cw20 asset.",
              "type": "object",
              "required": ["cw20"],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "CheckedDepositInfo": {
          "description": "Counterpart to the `DepositInfo` struct which has been processed. This type should never be constructed literally and should always by built by calling `into_checked` on a `DepositInfo` instance.",
          "type": "object",
          "required": ["amount", "denom", "refund_policy"],
          "properties": {
            "amount": {
              "description": "The number of tokens that must be deposited to create a proposal. This is validated to be non-zero if this struct is constructed by converted via the `into_checked` method on `DepositInfo`.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "denom": {
              "description": "The address of the cw20 token to be used for proposal deposits.",
              "allOf": [
                {
                  "$ref": "#/definitions/CheckedDenom"
                }
              ]
            },
            "refund_policy": {
              "description": "The policy used for refunding proposal deposits.",
              "allOf": [
                {
                  "$ref": "#/definitions/DepositRefundPolicy"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "DepositRefundPolicy": {
          "oneOf": [
            {
              "description": "Deposits should always be refunded.",
              "type": "string",
              "enum": ["always"]
            },
            {
              "description": "Deposits should only be refunded for passed proposals.",
              "type": "string",
              "enum": ["only_passed"]
            },
            {
              "description": "Deposits should never be refunded.",
              "type": "string",
              "enum": ["never"]
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "proposal_module": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Addr",
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "proposal_submitted_hooks": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HooksResponse",
      "type": "object",
      "required": ["hooks"],
      "properties": {
        "hooks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "query_extension": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    }
  }
}
